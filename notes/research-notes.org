* Data loading
#+PROPERTY: header-args :session :results value :exports both :cache yes
** Source format
*** Adaptive Biotechnologies makes the raw data available as a zip archive at [[https://s3-us-west-2.amazonaws.com/publishedproject-supplements/emerson-2017-natgen/emerson-2017-natgen.zip]].
*** The dataset consists of one TSV file per patient with each sequence as a row.
*** Confusingly, some of the fields appear to be per-patient metadata that is repeated on each row.
*** Here is a 1mb sample of the raw data (both cohorts).
#+BEGIN_SRC python
import pandas as pd

sample_names = '''rearrangement amino_acid frame_type rearrangement_type
templates reads frequency productive_frequency cdr3_length v_family
v_gene v_allele d_family d_gene d_allele j_family j_gene j_allele
v_deletions d5_deletions d3_deletions j_deletions n2_insertions
n1_insertions v_index n1_index n2_index d_index j_index v_family_ties
v_gene_ties v_allele_ties d_family_ties d_gene_ties d_allele_ties
j_family_ties j_gene_ties j_allele_ties sequence_tags v_shm_count
v_shm_indexes antibody sample_name species locus product_subtype
kit_pool total_templates productive_templates outofframe_templates
stop_templates dj_templates
total_rearrangements productive_rearrangements outofframe_rearrangements
stop_rearrangements dj_rearrangements total_reads
total_productive_reads total_outofframe_reads total_stop_reads
total_dj_reads productive_clonality productive_entropy
sample_clonality sample_entropy sample_amount_ng
sample_cells_mass_estimate fraction_productive_of_cells_mass_estimate
sample_cells fraction_productive_of_cells max_productive_frequency
max_frequency counting_method primer_set release_date sample_tags
fraction_productive order_name kit_id total_t_cells'''.split()

sample = pd.read_csv('./misc/1mb_sample.tsv', sep='\t', header=None, names=sample_names, index_col=False, na_values=['unresolved'])
cdr3_v_j = ['amino_acid', 'j_family', 'j_gene', 'j_allele', 'v_family', 'v_gene', 'v_allele']
sample[cdr3_v_j]
#+END_SRC

#+RESULTS[5eba965a295cbaa1e2eb0ee05a1d99bd4c656887]:
#+begin_example
            amino_acid j_family      j_gene  j_allele v_family      v_gene  v_allele
0       CASSRTGPGNTIYF  TCRBJ01  TCRBJ01-03       1.0  TCRBV05  TCRBV05-04       1.0
1    CASSYRANTQGAGEAFF  TCRBJ01  TCRBJ01-01       1.0  TCRBV06         NaN       NaN
2        CASSPRNTGELFF  TCRBJ02  TCRBJ02-02       1.0  TCRBV03         NaN       NaN
3      CASSAITGVDSPLHF  TCRBJ01  TCRBJ01-06       1.0  TCRBV05  TCRBV05-05       1.0
4                  NaN  TCRBJ02  TCRBJ02-02       1.0  TCRBV09  TCRBV09-01       NaN
..                 ...      ...         ...       ...      ...         ...       ...
924                NaN  TCRBJ01  TCRBJ01-04       1.0  TCRBV27  TCRBV27-01       1.0
925       CSATGFNTEAFF  TCRBJ01  TCRBJ01-01       1.0  TCRBV29  TCRBV29-01       1.0
926     CASRLGWGGTEAFF  TCRBJ01  TCRBJ01-01       1.0  TCRBV04  TCRBV04-02       1.0
927      CASSLRLTGELFF  TCRBJ02  TCRBJ02-02       1.0  TCRBV27  TCRBV27-01       1.0
928                NaN  TCRBJ01  TCRBJ01-05       1.0  TCRBV05  TCRBV05-01       1.0

[929 rows x 7 columns]
#+end_example

** Extracting unique TCRB sequences
*** The paper states that a unique TCRB sequence is defined as a "unique combination of a V gene, a CDR3 amino acid sequence, and a J gene."
**** They state that this criterion "does imply an identical TCRB protein sequence, although, owing to HLA restriction and the potential to pair with different TCRA chains in different T cells, it does not guarantee that two such receptors will have identical antigen specificities."
**** This is ambiguous with regards to the raw data. Some questions:
***** Does it mean that we should ignore V and J alleles and just consider the genes?
****** I don't think so. Some figures/tables from the paper show an allele (e.g. Supplementary Figure 2b).
***** What about the nucleotide sequence in the =rearrangement= field? Or the TCRD gene or allele? Or any of the other assorted sequence-specific fields?
***** Not every row has an =amino_acid= sequence. Should these rows be discarded?
***** Some rows don't have V and J alleles (+not sure about genes+ some sequences only have a family). Should these rows be discarded?
****** No. Looking at Supplementary Table 2, there are V genes listed with only a family, family+gene, and family+gene+allele.
****** In the sample data:
******* There are very few J genes without gene or allele data.
#+BEGIN_SRC python
[pd.isna(sample[c]).sum() for c in ['j_family', 'j_gene', 'j_allele']]
#+END_SRC

#+RESULTS[86a03261c0dd853dc9458d8e7fb06afa957073a3]:
| 0 | 1 | 1 |

******* Which sequence has missing J gene information?
#+BEGIN_SRC python
sample[pd.isna(sample['j_gene'])][cdr3_v_j]
#+END_SRC

#+RESULTS[d5d98969a2e37ee30cb9f92a1848a3138761dcec]:
:            amino_acid j_family j_gene  j_allele v_family v_gene  v_allele
: 285  CSARDRTGTGYNEQFF  TCRBJ02    NaN       NaN  TCRBV20    NaN       NaN

******* It is much more common for V genes to have missing data.
#+BEGIN_SRC python
[pd.isna(sample[c]).sum() for c in ['v_family', 'v_gene', 'v_allele']]
#+END_SRC

#+RESULTS[351bcef9b3c435c9d5881def8e4d5d6e7f509471]:
| 1 | 204 | 346 |

******* Which sequence has no =v_family=?
#+BEGIN_SRC python
sample[pd.isna(sample['v_family'])][cdr3_v_j]
#+END_SRC

#+RESULTS[52333642085d64415d80e2fa936bbcee03295521]:
:     amino_acid j_family      j_gene  j_allele v_family v_gene  v_allele
: 640        NaN  TCRBJ02  TCRBJ02-07       1.0      NaN    NaN       NaN

******* Are there any non-1 alleles?
#+BEGIN_SRC python
[len(sample[(sample[s + '_allele'] != 1) & pd.notna(sample[s + '_allele'])]) for s in 'vj']
#+END_SRC

#+RESULTS[afbd3360a4e4d681d0da3bead4962f15a28073d1]:
| 26 | 0 |

******* How many sequences are missing =amino_acid= fields?
#+BEGIN_SRC python
sample[pd.isna(sample.amino_acid)][cdr3_v_j]
#+END_SRC

#+RESULTS[ee7484bcc0c7af6061eac28468e39f3fd7d699dc]:
#+begin_example
    amino_acid j_family      j_gene  j_allele v_family      v_gene  v_allele
4          NaN  TCRBJ02  TCRBJ02-02       1.0  TCRBV09  TCRBV09-01       NaN
36         NaN  TCRBJ02  TCRBJ02-03       1.0  TCRBV28  TCRBV28-01       1.0
56         NaN  TCRBJ02  TCRBJ02-04       1.0  TCRBV07  TCRBV07-09       NaN
63         NaN  TCRBJ02  TCRBJ02-07       1.0  TCRBV20         NaN       NaN
65         NaN  TCRBJ02  TCRBJ02-07       1.0  TCRBV24         NaN       NaN
..         ...      ...         ...       ...      ...         ...       ...
909        NaN  TCRBJ02  TCRBJ02-01       1.0  TCRBV12         NaN       NaN
911        NaN  TCRBJ02  TCRBJ02-03       1.0  TCRBV06  TCRBV06-08       1.0
916        NaN  TCRBJ02  TCRBJ02-04       1.0  TCRBV03         NaN       NaN
924        NaN  TCRBJ01  TCRBJ01-04       1.0  TCRBV27  TCRBV27-01       1.0
928        NaN  TCRBJ01  TCRBJ01-05       1.0  TCRBV05  TCRBV05-01       1.0

[129 rows x 7 columns]
#+end_example

******* Are there any sequences without a =rearrangement=?
#+BEGIN_SRC python
pd.isna(sample.rearrangement).sum()
#+END_SRC

#+RESULTS[395ea39c25a01801473c46fc63ad45d91c5715b4]:
: 0

***** How should V or J genes be compared if they have different amounts of information (i.e. TCRBV19 vs. TCRBV19-01)? Would this ever arise in practice?
***** Does the =frame_type= field matter? What about =rearrangement_type= (shouldn't it always be VDJ recombination)?
***** Should patients with unknown CMV status (25 in cohort 1) be discarded?
****** Yes. The paper states that "we analyzed each unique TCRB chain identified for the *641 subjects in cohort 1 with known CMV serostatus*" (emphasis added).
***** Some =amino_acid= fields have =*='s in them. What does this mean/should those sequences be ignored?
*** They find M = 89,840,865 unique TCRB sequences for the N = 666 subjects in the training cohort.
